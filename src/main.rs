/**

Description: A URL shortener written in Rust that uses a Least Frequently Used (LFU) cache to store shortened URLs. It allows users to submit a URL and returns a unique ID that can be used to retrieve the original URL later.
Args: None
Returns: None
*/
#![feature(plugin, custom_derive)]
// Enables the use of plugins and custom derived traits
#![plugin(rocket_codegen)]
// Enables the use of Rocket's procedural macros

extern crate rocket;
extern crate harsh;

use std::sync::RwLock;
use rocket::State;
use rocket::request::Form;
use rocket::response::Redirect;

mod repository;
mod shortener;
use repository::LFUCche; // Imports the LFU cache implementation

#[derive(FromForm)]
struct Url {
url: String,
}

/**

Description: The endpoint that handles URL lookups by ID.
Args:
repo: The shared LFU cache instance wrapped in a RwLock.
id: The ID that corresponds to the URL being requested.
Returns:
Ok(Redirect::permanent(url)): A redirect response to the original URL.
Err("Requested ID was not found."): An error message if the ID was not found in the cache.
*/
#[get("/<id>")]
fn lookup(repo: State<RwLock<LFUCache>>, id: &str) -> Result<Redirect, &'static str> {
match repo.read().unwrap().get(id) {
Some(url) => Ok(Redirect::permanent(url)),
_ => Err("Requested ID was not found.")
}
}
/**

Description: The endpoint that handles URL shortening requests.
Args:
repo: The shared LFU cache instance wrapped in a RwLock.
url_form: The submitted URL wrapped in a Form struct.
Returns:
Ok(id.to_string()): The unique ID generated by the cache as a string.
Err("Invalid URL."): An error message if the submitted URL is invalid.
*/
#[post("/", data = "<url_form>")]
fn shorten(repo: State<RwLock<LFUCache>>, url_form: Form<Url>) -> Result<String, String> {
let ref url = url_form.get().url;
let mut repo = repo.write().unwrap();
let id = repo.set(&url);
Ok(id.to_string())
}
fn main() {
let cache = RwLock::new(LFUCache::new()); // Initializes the LFU cache
rocket::ignite().manage(cache) // Wraps the cache in a State and passes it to Rocket's web framework
.mount("/", routes![lookup, shorten]) // Mounts the lookup and shorten endpoints
.launch(); // Launches the Rocket server
}